#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.0
#  in conjunction with Tcl version 8.6
#    Jan 07, 2022 11:49:49 PM +0530  platform: Darwin

import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import filedialog as fd
import numpy as np
import threading, random, time


from support.demodulator import Demodulator

import decoderGUI_support


class Toplevel1:
    def selectFile(self):
        filename = fd.askopenfilename(filetypes=[("IQ Files", ".raw .iq .bin")])
        self.LableDecoderStatus.configure(foreground="#000000")
        if filename:
            self.setStatus("File loaded, ready to decode!")
            self.iqFilePath.set(filename)
            self.btnDecode.configure(state='active')


    def decode(self):
        self.btnDecode.configure(state='disabled')
        self.btnSelectFile.configure(state = 'disabled')
        self.decodedMessage.set("")
        self.LableDecoderStatus.configure(foreground="#000000")
        demodThread = threading.Thread(target=self._decodeSupport, args = ()).start()
        loader = threading.Thread(target=self._workingIndicator, args = ()).start()


    def _decodeSupport(self):
        self._isWorking = True
        data = list(np.fromfile(open(self.iqFilePath.get()), dtype=np.float64))
        demod = Demodulator(preambleThres = float(self.preambleThres.get()), bitThres = float(self.bitDecodeThres.get()))
        dec = demod.demodulateSignal(data, self.setStatus, self.setMessage,)
        self.LableDecoderStatus.configure(foreground="#3acf89")
        self.btnDecode.configure(state='active')
        self.btnSelectFile.configure(state = 'active')
        self._isWorking = False
        self.progressBar.set("")


    def _workingIndicator(self):
        while (self._isWorking):
            self.progressBar.set("")
            for i in range(15):
                self.progressBar.set(self.progressBar.get() + '-')
                time.sleep(random.uniform(0, 1)/10)
        self.progressBar.set("")

    
    def setStatus(self, status):
        self.decoderStatus.set(status)


    def setMessage(self, message):
        m = self.decodedMessage.get()
        m += message
        self.decodedMessage.set(m)
    

    def __del__(self):
        self._isWorking = False

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("855x718+451+1014")
        top.minsize(1, 1)
        top.maxsize(1585, 1746)
        top.resizable(1,  1)
        top.title("EM Signal Decoder V1.0")

        self.top = top
        self._isWorking = False
        self.progressBar = tk.StringVar("")
        self.iqFilePath = tk.StringVar()
        self.preambleThres = tk.StringVar(value="0.05")
        self.bitDecodeThres = tk.StringVar(value="0.03")
        self.decodedMessage = tk.StringVar(value="Select an EM trace file to get the decoded message...")
        self.decoderStatus = tk.StringVar(value="Decoder is ready select an EM trace file to begin...")


        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=-0.018, rely=0.0, height=95, width=877)
        self.Label1.configure(background="#d86025")
        self.Label1.configure(compound='left')
        self.Label1.configure(font="-family {Verdana} -size 18 -weight bold")
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''EM Signal Decoder''')

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.018, rely=0.156, relheight=0.169
                , relwidth=0.966)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(text='''Select Signal File''')

        self.btnSelectFile = tk.Button(self.Labelframe1)
        self.btnSelectFile.place(relx=0.013, rely=0.347, height=52, width=101
                , bordermode='ignore')
        self.btnSelectFile.configure(borderwidth="2")
        self.btnSelectFile.configure(compound='left')
        self.btnSelectFile.configure(text='''Select File''')
        self.btnSelectFile.configure(command=self.selectFile)

        self.txtFileName = tk.Entry(self.Labelframe1)
        self.txtFileName.place(relx=0.153, rely=0.347, height=50, relwidth=0.831
                , bordermode='ignore')
        self.txtFileName.configure(background="white")
        self.txtFileName.configure(font="TkFixedFont")
        self.txtFileName.configure(state='readonly')
        self.txtFileName.configure(textvariable=self.iqFilePath)

        self.menubar = tk.Menu(top, font="TkMenuFont",
                               bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.Labelframe2 = tk.LabelFrame(self.top)
        self.Labelframe2.place(relx=0.013, rely=0.352, relheight=0.139
                , relwidth=0.967)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(text='''Decoder Thresholds''')

        self.Label2 = tk.Label(self.Labelframe2)
        self.Label2.place(relx=0.04, rely=0.32, height=13, width=160
                , bordermode='ignore')
        self.Label2.configure(anchor='w')
        self.Label2.configure(compound='left')
        self.Label2.configure(text='''Preamble Threshold''')

        self.txtPreambleThres = tk.Entry(self.Labelframe2)
        self.txtPreambleThres.place(relx=0.04, rely=0.53, height=30
                , relwidth=0.157, bordermode='ignore')
        self.txtPreambleThres.configure(background="white")
        self.txtPreambleThres.configure(font="TkFixedFont")
        self.txtPreambleThres.configure(textvariable=self.preambleThres)

        self.Label3 = tk.Label(self.Labelframe2)
        self.Label3.place(relx=0.324, rely=0.32, height=14, width=150
                , bordermode='ignore')
        self.Label3.configure(anchor='w')
        self.Label3.configure(compound='left')
        self.Label3.configure(text='''Bit Decode Threshold''')

        self.txtBitDecodeThres = tk.Entry(self.Labelframe2)
        self.txtBitDecodeThres.place(relx=0.324, rely=0.53, height=30
                , relwidth=0.157, bordermode='ignore')
        self.txtBitDecodeThres.configure(background="white")
        self.txtBitDecodeThres.configure(font="TkFixedFont")
        self.txtBitDecodeThres.configure(textvariable=self.bitDecodeThres)

        self.btnDecode = tk.Button(self.Labelframe2)
        self.btnDecode.place(relx=0.81, rely=0.42, height=42, width=121
                , bordermode='ignore')
        self.btnDecode.configure(borderwidth="2")
        self.btnDecode.configure(compound='left')
        self.btnDecode.configure(state='disabled')
        self.btnDecode.configure(text='''Decode Message''')
        self.btnDecode.configure(command=self.decode)

        self.Labelframe3 = tk.LabelFrame(self.top)
        self.Labelframe3.place(relx=0.013, rely=0.514, relheight=0.464
                , relwidth=0.966)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(text='''Output''')

        self.Label4 = tk.Label(self.Labelframe3)
        self.Label4.place(relx=0.027, rely=0.07, height=30,
                          width=55, bordermode='ignore')
        self.Label4.configure(anchor='w')
        self.Label4.configure(compound='left')
        self.Label4.configure(text='''Status''')

        self.txtDecodeStatus = tk.Entry(self.Labelframe3)
        self.txtDecodeStatus.place(relx=0.041, rely=-0.174, height=30
                , relwidth=0.855, bordermode='ignore')
        self.txtDecodeStatus.configure(background="white")
        self.txtDecodeStatus.configure(font="TkFixedFont")
        self.txtDecodeStatus.configure(state='readonly')


        self.Labelframe4 = tk.LabelFrame(self.Labelframe3)
        self.Labelframe4.place(relx=0.024, rely=0.33, relheight=0.628
                , relwidth=0.948, bordermode='ignore')
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(text='''Decoded Message''')

        self.Label4 = tk.Message(self.Labelframe4)
        self.Label4.place(relx=0.026, rely=0.182, height=143, width=736
                , bordermode='ignore')
        self.Label4.configure(font="-family {Display} -size 16 -weight bold")
        self.Label4.configure(width=710)
        self.Label4.configure(textvariable=self.decodedMessage)

        self.Labelframe5 = tk.LabelFrame(self.Labelframe3)
        self.Labelframe5.place(relx=0.024, rely=0.09, relheight=0.204
                , relwidth=0.948, bordermode='ignore')
        self.Labelframe5.configure(relief='groove')
        self.Labelframe5.configure(text='''Decoder Status''')

        self.LableDecoderStatus = tk.Label(self.Labelframe5)
        self.LableDecoderStatus.place(relx=0.026, rely=0.294, height=40, width=400
                , bordermode='ignore')
        self.LableDecoderStatus.configure(anchor='w')
        self.LableDecoderStatus.configure(font="-family {Arial} -size 11 -weight bold")
        self.LableDecoderStatus.configure(compound='left')
        self.LableDecoderStatus.configure(textvariable = self.decoderStatus)

        self.Label6 = tk.Label(self.Labelframe5)
        self.Label6.place(relx=0.83, rely=0.270, height=40, width=110
                , bordermode='ignore')
        self.Label6.configure(font="-family {Arial} -size 16 -weight bold")
        self.Label6.configure(anchor='w')
        self.Label6.configure(compound='left')
        self.Label6.configure(textvariable = self.progressBar)

def start_up():
    decoderGUI_support.main()


if __name__ == '__main__':
    decoderGUI_support.main()
